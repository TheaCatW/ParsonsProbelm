  "ps_python_printing_file_contents": {
    "description": "",
    "instructions": "Construct a program that opens up a file and prints out each line of the file",
    "initial": "try:\nmyfile = open(filename, \"r\")\nlinenum=1\nfor line in myfile:\nwords = line.split()\nword=words[2]\nprint("The third work in line",linenum,"is",word)\nlinenum+=1\nexcept OSError:\nprint(\"Error reading the file. The program execution ends.\")",
    "vartests": "[{ initcode : \"class OSError():\n\tdef __init__(self,text):\n\t\tpass\nfile_opened = 'False'\nfilename = 'text.txt'\nclass MockFile:\n\tdef __init__(self):\n\t\tglobal file_opened\n\t\tfile_opened = 'True'\n\t\tself.content = ['Jonh Alex 6 Sonia','Lily Roy Mike 7']\n\t\tself.counter = 0\n\tdef readline(self):\n\t\tif file_opened == 'False':\n\t\t\traise ValueError('I/O operation on closed file')\n\t\tif self.counter < len(self.content):\n\t\t\tline = self.content[self.counter] + '\\\n' \n\t\t\tself.counter = self.counter + 1\n\t\telse:\n\t\t\tline = ''\n\t\treturn line\n\tdef close(self):\n\t\tglobal file_opened\n\t\tfile_opened = 'False'\ndef open(open_file, mode):\n\tif open_file == 'text.txt':\n\t\treturn MockFile()\n\telse:\n\t\traise OSError('No such file or directory:' + str(open_file))\n\", code : \"\", message : \"Testing with filename set to 'text.txt'\", variables : { file_opened: 'False', __output : \"Some\n\nsample\n\ntext\n\n\" }  },{ initcode : \"class OSError():\n\tdef __init__(self,text):\n\t\tpass\nfilename = 'file_does_not_exist.txt'\nclass MockFile:\n\tdef __init__(self):\n\t\tself.content = ['Jonh Alex 6 Sonia','Lily Roy Mike 7']\n\t\tself.counter = 0\n\tdef readline(self):\n\t\tif self.counter < len(self.content):\n\t\t\tline = self.content[self.counter] + '\\\n' \n\t\t\tself.counter = self.counter + 1\n\t\telse:\n\t\t\tline = ''\n\t\treturn line\n\tdef close(self):\n\t\tpass\ndef open(open_file, mode):\n\tif open_file == 'text.txt':\n\t\treturn MockFile()\n\telse:\n\t\traise OSError('No such file or directory:' + str(open_file))\n\", code : \"\", message : \"Testing with filename set to 'file_does_not_exist.txt'\", variables : { __output : \"Error reading the file. The program execution ends.\n\" }  }] ",
    "type": "VARTEST",
    "description": "Practising reading a file and printing its contents",
    "title": "",
    "order": 22
  }
